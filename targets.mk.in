INCLUDED_TARGERS_MK = 1

include $(CONFIGDIR)/tools.mk

.PHONY: $(SUBDIRS)
.EXPORT_ALL_VARIABLES:
.NOTPARALLEL:

all: $(SUBDIRS)

__profile_internal_rule:
	if [ -n "$(PROFILE)" ]; then \
	    $(CHROOT_INVALIDATE_CACHE) mki; \
	    [ ! -d "$(WORKDIR)" ] || $(CHROOT_CLEAN); \
	fi

prepare: $(SUBDIRS)
	mkdir -p -- $(PKGBOX) $(WORKDIR) $(OUTDIR)
	mkdir -p -- $(CACHEDIR)/mki $(CACHEDIR)/hsh

prepare-workdir: prepare $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    $(CHROOT_PREPARE) && \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

prepare-image-workdir: prepare-workdir $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    $(CHROOT_IMAGE_PREPARE) && \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

run-scripts: prepare-workdir $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    if ! $(CHROOT_SCRIPTS); then \
		$(CHROOT_INVALIDATE_CACHE) mki; \
		exit 1; \
	    fi; \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

run-image-scripts: prepare-workdir $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    if ! $(CHROOT_IMAGE_SCRIPTS); then \
		$(CHROOT_INVALIDATE_CACHE) mki; \
		exit 1; \
	    fi; \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

build-propagator: prepare-workdir $(SUBDIRS)
	$(CHROOT_BUILD_PROPAGATOR)

copy-isolinux: prepare-workdir $(SUBDIRS)
	$(CHROOT_COPY_ISOLINUX)

copy-pxelinux: prepare-workdir $(SUBDIRS)
	$(CHROOT_COPY_PXELINUX)

copy-tree: prepare-workdir $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    $(CHROOT_COPY_TREE) && \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

copy-subdirs: prepare-workdir $(SUBDIRS)
	if [ -n "$(SUBDIRS)" ] && ! $(CHROOT_CACHE) check $@; then \
	    $(CHROOT_COPY_SUBDIRS) && \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

split: prepare-workdir $(SUBDIRS)
	$(CHROOT_SPLIT)

copy-packages: prepare-workdir $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    { \
		$(EXPAND_PKGS) simple $(IMAGE_PACKAGES) && \
		$(EXPAND_PKGS) regexp $(IMAGE_PACKAGES_REGEXP) || exit 1; \
	    } | xargs -r $(CHROOT_COPY_PKGS) && \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

build-image: prepare-image-workdir $(SUBDIRS)
	if ! $(CHROOT_CACHE) check $@; then \
	    { \
		$(EXPAND_PKGS) simple $(IMAGE_PACKAGES) && \
		$(EXPAND_PKGS) regexp $(IMAGE_PACKAGES_REGEXP) || exit 1; \
	    } | xargs -r $(CHROOT_IMAGE_INSTALL) && \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

pack-image: prepare-workdir copy-subdirs $(SUBDIRS)
	$(CHECK_OBSOLETE) $@; \
	if ! $(CHROOT_CACHE) check $@; then \
	    if [ -n "$(MKI_PACK_RESULTS)" ]; then \
		$(CHROOT_PACK_RESULTS) || exit 1; \
	    else \
		$(CHROOT_PACK) || exit 1; \
	    fi; \
	    $(CHROOT_CACHE) build $@ || exit 1; \
	fi

clean-current:
	[ ! -d "$(CACHEDIR)" ] || $(CHROOT_INVALIDATE_CACHE) mki;
	[ ! -d "$(WORKDIR)" ]  || $(CHROOT_CLEAN);

clean: clean-current $(SUBDIRS)

distclean-current: clean-current
	rm -rf -- $(WORKDIR) $(OUTDIR) $(CACHEDIR) $(PKGBOX)

distclean: distclean-current $(SUBDIRS)

$(SUBDIRS):
	$(RUN_MAKE) "$@" $(MAKE) $(MFLAGS) $(MAKECMDGOALS)
