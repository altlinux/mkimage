#123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789

mkimage - это набор утилит для создания образов дисков.

################################################################################
### Идея.
################################################################################

Основная идея - это то, что создание образа диска схожа с компиляцией программы.
Эта задача, которая не предназначена для обычного пользователя. Собственно, как
и процесс создания профиля.

Раз уж мы хотим получить инструмент пригодный для разработчика, то мы должны
пользоваться привычными ему подходами и инструментами (например make и
configure).

mkimage основан на GNU make т.к. это привычный и удобный (что не мало важно)
инструмент. Для построения чрутов используется hasher.

################################################################################
### Состав mkimage
################################################################################

mkimage состоит из двух частей:

1. Описание сборки стадии;
2. Готовых скриптов для для реализации отдельных стадий сборки.

################################################################################
### Конфигурационный файл
################################################################################

Как уже говорилось, конфигурационный файл - это Makefile. Для него определена 
некоторая конфигурация и набор целей по умолчанию (/usr/share/mkimage/rules.mk).
Этот файл следует включать в каждый Makefile.

### Сборочные цели

Создание любого образа описывается набором целей. Каждая цель это атомарное
действие. Целями могут являться как создание загрузочного образа, так и
копирование в рабочий чрут каких-либо файлов. Вы можете как пользоваться 
предопределёнными целями, так и писать свои цели.

Вот список определённых целей:

run-scripts        - Цель выполняет скрипты внутри инструментального чрута.
run-image-scripts  - Тоже самое что и `run-scripts', но выполняет скрипты внутри
                     рабочего чрута.
build-propagator   - Создаёт стадию propagator для инсталляционного образа. Эта
                     стадия используется для загрузки инсталлятора.
copy-isolinux      - Копирует в рабочий чрут файлы необходимые для isolinux.
copy-pxelinux      - Копирует в рабочий чрут файлы необходимые для pxelinux.
copy-tree          - Копирует в рабочий чрут произвольное дерево каталогов.
copy-subdirs       - Копирует в рабочий чрут результаты работы нижестоящих
                     образов.
copy-packages      - Вычисляет и копирует в рабочий чрут замкнутое множество
                     пакетов.
split              - Разделяет содержимое директории в рабочем чруте на
                     поддиректории по определённому критерию (см. MKI_SPLIT).
build-image        - Устанавливает в рабочий чрут множество пакетов.
pack-image         - Пакует рабочий чрут.

Существуют цели для интерактивной работы:

clean-current      - Удаляет рабочий чрут в текущем образе, но не удаляет
                     результаты работы. Нижестоящие образы затронуты не будут
distclean-current  - Полностью отищает образ от служебных файлов mkimage и
                     удаляет результаты его работы.
clean              - Эта цель эквивалентна `clean-current', но действует
                     рекурсивно.
distclean          - Эта цель эквивалентна `distclean-current', но действует
                     рекурсивно.

Например, последовательность целей:

all: build-image run-scripts pack-image

устанавливает в чрут пакеты, обрабатывает этот чрут скриптами и пакует его.

Почти все цели это "обёртка" над вызовом скриптов. Это сделано специально,
чтобы пользователь имел возможность переопределять эти скрипты, не изменяя
сами цели.

### Переменные

Переменные в Makefile подразделяются на три группы:

1. Переменные локальные для данного Makefile'а. Эти переменные имеют влияние
только на сборку данного образа.

2. Глобальные переменные. Они передаются всем нижестоящим образам. Такие
переменные имеют префикс 'GLOBAL_' . Не все локальные переменные имеют
глобальный эквивалент.

3. Переменные, передаваемые скриптам, выполняемым внутри чрутов (первого или
второго). Как правило, это информационные переменные. Поэтому они имеют
префикс 'INFO_' .

Список переменных:

VERBOSE,
GLOBAL_VERBOSE        - Включает отладочную информацию локально и глобально (
                        для всех нижестоящих образов) соответственно.
TARGET,
GLOBAL_TARGET         - Переменная определяет архитектуру под которую нужно
                        собирать образ.
			По умолчанию эта переменная выставлена в `uname -m`.

HSH_APT_CONFIG,
GLOBAL_HSH_APT_CONFIG - Позволяет переопределять конфигурационный файл apt.
                        По умолчанию берётся системный конфиг.

HSH_APT_PREFIX,
GLOBAL_HSH_APT_PREFIX - apt prefix.

SUBDIRS               - Переменная перечисляет имена директорий, в которых
                        содержатся нижестоящие образы.

OUTDIR                - Переопределяет директорию, в которую сохраняется
                        результат сборки образа.
			По умолчанию это ".work/.out" .

CLEANUP_OUTDIR        - Очищать или нет OUTDIR перед выкладыванием результатов.
                        По умолчанию эта переменная выставлена.

NO_CACHE              - Позволяет отключить кэширование результатов.
                        По умолчанию эта переменная не выставлена.

MKI_SCRIPTDIR         - Определяет название директории, содержащей скрипты для
                        исполнения в инструментальном чруте.
			По умолчанию: $(CURDIR)/scripts.d

MKI_IMAGE_SCRIPTDIR   - Определяет название директории, содержащей скрипты для
                        исполнения в рабочем чруте.
			По умолчанию: $(CURDIR)/image-scripts.d

CHROOT_PACKAGES       - Перечисляет имена пакетов, которые необходимо установить
                        в инструментальный чрут. Вы можете использовать не 
			только имена пакетов, вы также можете указать путь до
			файла(ов), в котором будут перечислены пакеты.

IMAGE_PACKAGES        - Перечисляет имена пакетов, которые необходимо установить
                        или скопировать (в зависимости от цели) в рабочий чрут.

MKI_DESTDIR           - Директория, в которую нужно скопировать пакеты
                        перечисленные в IMAGE_PACKAGES в случае, когда их нужно
			копировать.
			Эта переменная используется только целью `copy-packages'.

COPY_TREE             - Определяет директории, которые нужно скопировать в
                        рабочий чрут.
			Эта переменная используется только целью `copy-tree'.

MKI_PACKTYPE          - Определяет метод запаковки рабочего чрута.
                        Эта переменная используется только целью `pack-image'.
			Параметр устарел. Используйте MKI_PACK_RESULTS.

MKI_OUTNAME           - Если рабочий чрут пакуется в некий образ, то эта переменная
                        определяет имя этого образа.
                        Эта переменная используется только целью `pack-image'.
			Параметр устарел. Используйте MKI_PACK_RESULTS.

MKI_PACK_RESULTS      - Этот переметр комбинирует MKI_PACKTYPE и MKI_OUTNAME, делая
                        их устаревшими. Формат этой переменной следующий:

			<PACKTYPE>:<OUTNAME>[:<SUBDIR>] [<PACKTYPE1>:<OUTNAME1>[:<SUBDIR1>] ...]

			таким образом, один и тот же рабочий чрут можно запаковать
			несколькими разными способами с разными именами.

                        Тип паковки(PACKTYPE) может быть одним из:
			boot    - создаёт загрузочный ISO образ.
			isoboot - тоже создаёт загрузочный ISO образ. Но в отличии
			          от `boot' не патсется создать образа для propagator.
			isodata - создаёт ISO образ с данными.
			squash  - создаёт образ с squashfs файловой системой.
			data    - копирует директорию "как есть", не применяя никаких
			          методов сжатия и паковки.
			tarbz2  - создаёт тарболл пожатый bzip2. Этот метод устарел.
			          Используйте метод `tar' + параметр MKI_TAR_COMPRESS.
			tar     - создаёт tar архив и в зависимости от значения
			          переменной MKI_TAR_COMPRESS сжимает его.

                        SUBDIR - поддиретория в рабочем чруте, которую нужно запаковать.

MKI_TAR_COMPRESS      - Переменная указывает метод сжатия tar архива.
                        Доступные значения: `bzip2' или `gzip'. Если переменная пуста, то
			сжатие вообще не производится.

PACK_SQUASHFS_PROCESSORS - Определяет количество процессоров при запаковке squashfs
                        образа. По умолчанию этот параметр выставлен равным количеству
			процессоров на вашей машине.

MKI_SPLIT             - Параметер позволяет разбить MKI_DESTDIR на поддиректории c
                        определённым размером. Формат переменной следующий:

			<SIZE1>:<DESTDIR1> [<SIZE2>:<DESTDIR2> ...]

                        DESTDIR1 указывается относительно рабочего чрута.
			SIZE1 может быть как в байтах, так и в сокращённом формате
			(Kb, Mb, Gb или Tb). Специальное значение `*' укзывет на остаток.

MKI_SPLITTYPE         - Если вам не нравится критерий поиска или сортировки файлов
                        при выполении цели `split', то вы может создать свои функции
			для выполнения этих действий. В MKI_SPLITTYPE указывается
			имя скрипта, в котором вы можете переопределить функции поиска
			и сортировки: gen_filelist(), sortfiles(outfile).
			(Подробнее смотри реализацию утилиты mki-split)

Параментры PROPAGATOR_MAR_MODULES, PROPAGATOR_INITFS и PROPAGATOR_VERSION используются
для создания образа первой стадии (propagator).

PROPAGATOR_MAR_MODULES - Список модулей, которые будут помещены в образ.
PROPAGATOR_INITFS      - Файл с описанием какие каталоги нужно помещять в образ.
                         См. gencpio.
PROPAGATOR_VERSION     - Указывает версию продукта.

BOOT_TYPE             - Описывает каким образом будет загружаться образ. Доступные
                        значения 'isolinux' и 'pxelinux'. Вы можете указать
			несколько значений сразу.

BOOT_APPI -
BOOT_COPY -
BOOT_ABST -
BOOT_BIBL -
BOOT_PREP -
BOOT_PUBL -
BOOT_SYSI -
BOOT_VOLI -
BOOT_VOLS -

################################################################################
### Профиль.
################################################################################

Создание любого образа можно разбить на несколько стадий. Cоздание образа 
инсталлятора, создание образа с пакетами для базовой системы, создание iso 
образа диска ... всё это разные, возможно связанные между собой, стадии.

Например, создание iso образа диска можно представить ввиде дерева:

1. iso-disk
  \ 1.1 installer
       \ 1.1.1 installer stage 1
       \ 1.1.2 installer stage 2
  \ 1.2 RPMS.basesystem
  \ 1.3 RPMS.extra

Таким образом, у нас появляется иерархия стадий создания образа. Каждый
вышестоящий образ получает в распоряжение результаты нижестоящих.

Каждая из стадий обрабатывается одинаково:

1. Создаётся рабочий chroot;
2. В chroot копируется необходимая информация;
3. Производятся какие-либо действия;
4. Из chroot копируется результат.

Конфигурационный файл каждой стадии - это Makefile. В нём описаны действия по
сборке этой стадии и указаны директории, содержащие нижестоящие стадии.
Для нашего примера это будет выглядеть так:

-rw-r--r-- iso-disk/Makefile
-rw-r--r-- iso-disk/installer/Makefile
-rw-r--r-- iso-disk/installer/stage1/Makefile
-rw-r--r-- iso-disk/installer/stage2/Makefile
-rw-r--r-- iso-disk/RPMS.basesystem/Makefile
-rw-r--r-- iso-disk/RPMS.extra/Makefile

iso-disk/Makefile:           SUBDIRS = installer RPMS.basesystem RPMS.extra
iso-disk/installer/Makefile: SUBDIRS = stage1 stage2

Каждый Makefile выглядит примерно так:

------ Makefile --------
include /usr/share/mkimage/rules.mk

CHROOT_PACKAGES = apt-utils rsync
IMAGE_PACKAGES = ./packages
MKI_DESTDIR = ALTLinux/RPMS.base
MKI_PACKTYPE = data

INFO_ARCH       = $(TARGET)
INFO_ORIGIN     = ALT Linux Team
INFO_NAME       = ALT Linux Basesystem
INFO_VERSION    = 4.0
INFO_LABEL      = Server

all: copy-packages run-scripts pack-image
------------------------

Первая строчка подключает "движок" mkimage. В него входят определения переменных
и правил.

Далее определяются переменные образа и последовательность выполнения правил.
